# This buildout can be used to obtain a complete test system from scratch:
#
# Use it like this:
#
#    virtualenv .
#    ./bin/pip install zc.buildout
#    bin/buildout

[buildout]
extends = http://dist.plone.org/release/4.3.4/versions.cfg
versions = versions
develop = .

zeoserver-address = 8100
zeoclient-address = 8080
user = admin:adminsecret

parts =
    lxml
    omelette
    zeoserver
    zeoclient
    test
    robot
    i18ndude
    update_translations

eggs =
    bika.lims
    bika.uw
    i18ndude
    lxml
    zest.releaser

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml==2.3.6
force = false
static-build = true

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeoserver-address}
var = var
blob-storage = var/blobstorage
zserver-threads = 1
zeo-log     = var/zeoserver.log
pid-file    = var/zeoserver.pid
socket-name = var/zeo.zdsock

[zeoclient]
recipe = plone.recipe.zope2instance
var = var
blob-storage = var/blobstorage
zeo-address = ${buildout:zeoserver-address}
http-address = ${buildout:zeoclient-address}
user = ${buildout:user}
resources = ${buildout:directory}/resources
locales = ${buildout:directory}/locales
eggs = ${buildout:eggs}
zeo-client = true
shared-blob = on
http-fast-listen = off
event-log = var/zeoclient-event.log
z2-log    = var/zeoclient-Z2.log
pid-file  = var/zeoclient.pid
lock-file = var/zeoclient.lock

[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs = bika.lims [test]

[robot]
recipe = zc.recipe.egg
eggs = ${buildout:eggs} plone.app.robotframework

[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

[update_translations]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/update_translations
input = inline:
    #!/bin/sh
    #Generated by buildout from bika.uw/buildout.cfg
    I18NDUDE=${buildout:directory}/bin/i18ndude
    EXCLUDE="bin build develop-eggs eggs include lib local parts src"
    LOCALES=${buildout:directory}/bika/uw/locales
    cd $LOCALES

    ### always be sure that bika.lims is updated from transifex

    ###### bika domain ######
    ### Re-scan source for new strings
    $I18NDUDE rebuild-pot --pot bika.pot --create bika ${buildout:directory}
    ### merge the bika.lims/bika catalog (which must be complete)
    $I18NDUDE merge --pot bika.pot --merge ${buildout:directory}/parts/omelette/bika/lims/locales/bika.pot > bika-tmp.pot
    mv bika-tmp.pot bika.pot

    ###### plone domain ######
    ### Re-scan source for new strings
    $I18NDUDE rebuild-pot --pot plone.pot --create plone ${buildout:directory}/bika/uw/profiles
    ### merge the bika.lims/plone catalog (which should contain entire core plone catalog)
    $I18NDUDE merge --pot plone.pot --merge ${buildout:directory}/parts/omelette/bika/lims/locales/plone.pot > plone-tmp.pot
    mv plone-tmp.pot plone.pot

    ### add manual translations (overrides)
    $I18NDUDE trmerge plone.pot plone-manual.pot > plone-tmp.pot
    mv plone-tmp.pot plone.pot

    ### sync
    $I18NDUDE sync --pot plone.pot */LC_MESSAGES/plone.po

    find . -name "*.mo" -delete
    for po in `find . -name "*.po"`; do
        ###
        msgfmt -o `dirname $po`/`basename $po .po`.mo $po;
    done

    ### Transifex
    eho run \"tx push -s -t\" if everything went smoothly.
mode = 755

[versions]
zc.buildout=2.3.1
setuptools=14.3
